// script.js

// Importar las funciones necesarias desde pdf.mjs
import * as pdfjsLib from './lib/pdfjs/build/pdf.mjs';

// --- CONFIGURACIÓN INICIAL ---
if (typeof pdfjsLib.GlobalWorkerOptions !== 'undefined') {
    pdfjsLib.GlobalWorkerOptions.workerSrc = './lib/pdfjs/build/pdf.worker.mjs';
}
const initialScale = 1.5; // Escala inicial de renderizado del PDF

// --- ELEMENTOS DEL DOM ---
const pdfFileInput = document.getElementById('pdf-file-input');
const canvas = document.getElementById('pdf-canvas');
const context = canvas.getContext('2d');
const screenCoordsEl = document.getElementById('screen-coords');
const pdfCoordsEl = document.getElementById('pdf-coords');
const measureDistanceBtn = document.getElementById('measure-distance-btn');
const measureStatusEl = document.getElementById('measure-status');
const measureCanvas = document.getElementById('measure-canvas');
const measureContext = measureCanvas.getContext('2d');
const measurementsListEl = document.getElementById('measurements-list');
const clearMeasurementsBtn = document.getElementById('clear-measurements-btn');
const startCalibrateBtn = document.getElementById('start-calibrate-btn');
const calibrationStatusEl = document.getElementById('calibration-status');
const calibrationInputDiv = document.getElementById('calibration-input-div');
const knownLengthInput = document.getElementById('known-length');
const setScaleBtn = document.getElementById('set-scale-btn');
const predefinedScaleSelect = document.getElementById('predefined-scale');
const applyPredefinedScaleBtn = document.getElementById('apply-predefined-scale-btn');
const knownUnitSelect = document.getElementById('known-unit');
const currentScaleInfoEl = document.getElementById('current-scale-info');

// --- ESTADO DE LA APLICACIÓN ---
let pdfDoc = null;
let currentPageNum = 1;
let pageRendering = false;
let pageNumPending = null;
let currentViewport = null;
let currentPdfSource = null;

let isCalibrating = false;
let calibrationPoints = [];
let scaleFactor = null; // Se inicializa como null
let realWorldUnit = ''; // Se inicializa como vacía

let isMeasuringDistance = false;
let measurementPoints = [];
let allMeasurements = [];

// --- FUNCIONES DE RENDERIZADO DEL PDF ---
function renderPage(num) {
    console.log('Paso 9: Entrando a renderPage para la página', num);
    pageRendering = true;
    if (!pdfDoc) {
        console.warn("Paso WARN B: renderPage llamado pero pdfDoc es null.");
        pageRendering = false;
        return;
    }
    console.log('Paso 10: Llamando a pdfDoc.getPage...');
    pdfDoc.getPage(num).then(function(page) {
        console.log('Paso 11: pdfDoc.getPage TUVO ÉXITO. Objeto page:', page);
        currentViewport = page.getViewport({ scale: initialScale });
        console.log('Paso 12: Viewport creado:', currentViewport);
        canvas.height = currentViewport.height;
        canvas.width = currentViewport.width;

        measureCanvas.height = currentViewport.height;
        measureCanvas.width = currentViewport.width;

        const renderContext = {
            canvasContext: context,
            viewport: currentViewport
        };
        const renderTask = page.render(renderContext);

        renderTask.promise.then(function() {
            console.log('Paso 13: Renderizado de página COMPLETADO.');
            pageRendering = false;
            if (pageNumPending !== null) {
                renderPage(pageNumPending);
                pageNumPending = null;
            }
            redrawAllMeasurements();
        }).catch(function(error) {
            console.error("Paso ERROR C: Error AL RENDERIZAR la página:", error);
            pageRendering = false;
        });
    }).catch(function(error) {
        console.error("Paso ERROR D: Error AL OBTENER la página:", error);
        pageRendering = false;
    });
}

function queueRenderPage(num) {
    if (pageRendering) {
        pageNumPending = num;
    } else {
        renderPage(num);
    }
}

// --- FUNCIÓN PARA CARGAR Y RENDERIZAR EL PDF ---
function loadAndRenderPdf(pdfSource) {
    console.log('Paso 3: Entrando a loadAndRenderPdf con fuente:', pdfSource);

    if (currentPdfSource && typeof currentPdfSource === 'string' && currentPdfSource.startsWith('blob:')) {
        URL.revokeObjectURL(currentPdfSource);
        console.log('URL de objeto anterior revocada:', currentPdfSource);
    }
    currentPdfSource = pdfSource;

    // Resetear estado CADA VEZ que se carga un nuevo PDF
    console.log('Reseteando estado en loadAndRenderPdf. scaleFactor ANTES:', scaleFactor, 'realWorldUnit ANTES:', realWorldUnit);
    pdfDoc = null;
    currentPageNum = 1;
    scaleFactor = null;         // Correcto: la escala es específica del PDF
    realWorldUnit = '';         // Correcto
    currentScaleInfoEl.textContent = "No calibrada";
    calibrationStatusEl.textContent = 'Esperando inicio...';
    calibrationInputDiv.style.display = 'none';
    calibrationPoints = [];
    isCalibrating = false;
    isMeasuringDistance = false;
    measurementPoints = [];
    allMeasurements = [];
    clearMeasureCanvas();
    updateMeasurementsList();
    measureDistanceBtn.textContent = 'Medir Distancia';
    measureDistanceBtn.style.backgroundColor = '#007bff';
    measureStatusEl.textContent = '';
    measureCanvas.style.pointerEvents = 'none';
    console.log('Paso 4: Estado de la aplicación reseteado. scaleFactor DESPUÉS:', scaleFactor, 'realWorldUnit DESPUÉS:', realWorldUnit);


    console.log('Paso 5: Llamando a pdfjsLib.getDocument...');
    const loadingTask = pdfjsLib.getDocument(pdfSource);
    loadingTask.promise.then(function(pdfDoc_) {
        console.log('Paso 6: pdfjsLib.getDocument TUVO ÉXITO. pdfDoc_ recibido:', pdfDoc_);
        pdfDoc = pdfDoc_;
        console.log('Paso 7: Variable global pdfDoc ASIGNADA:', pdfDoc);

        let pdfTitle = "Visor PDF";
        if (pdfFileInput.files && pdfFileInput.files.length > 0) {
             pdfTitle = pdfFileInput.files[0].name;
        } else if (pdfDoc && pdfDoc.Title) {
            pdfTitle = pdfDoc.Title;
        }
        document.title = `${pdfTitle} (${currentPageNum}/${pdfDoc.numPages})`;

        console.log('Paso 8: Llamando a renderPage para la página', currentPageNum);
        renderPage(currentPageNum);

    }).catch(function(reason) {
        console.error('Paso ERROR A: pdfjsLib.getDocument FALLÓ. Razón:', reason);
        alert('Error al cargar el PDF: ' + (reason.message || reason));
        context.clearRect(0, 0, canvas.width, canvas.height);
        measureContext.clearRect(0, 0, measureCanvas.width, measureCanvas.height);
        pdfCoordsEl.textContent = "-";
        screenCoordsEl.textContent = "-";
        document.title = "Visor PDF";
        pdfDoc = null;
    });
}

// --- EVENT LISTENER PARA EL INPUT DE ARCHIVO ---
pdfFileInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    console.log('Paso 1: Archivo seleccionado en input:', file);

    if (file && file.type === 'application/pdf') {
        const fileURL = URL.createObjectURL(file);
        console.log('Paso 2: URL de objeto creada:', fileURL);
        loadAndRenderPdf(fileURL);
    } else if (file) {
        alert('Por favor, selecciona un archivo PDF válido.');
        console.warn('Intento de cargar archivo no PDF:', file);
    } else {
        console.log('Paso 1.1: No se seleccionó ningún archivo.');
    }
});

// --- LÓGICA DE HERRAMIENTA DE MEDICIÓN ---
function clearMeasureCanvas() {
    measureContext.clearRect(0, 0, measureCanvas.width, measureCanvas.height);
}

function redrawAllMeasurements() {
    clearMeasureCanvas();
    allMeasurements.forEach(measurement => {
        drawLineOnMeasureCanvas(measurement.p1Screen, measurement.p2Screen, measurement.text);
    });
}

function drawLineOnMeasureCanvas(p1Screen, p2Screen, text) {
    measureContext.beginPath();
    measureContext.moveTo(p1Screen.x, p1Screen.y);
    measureContext.lineTo(p2Screen.x, p2Screen.y);
    measureContext.strokeStyle = 'blue';
    measureContext.lineWidth = 2;
    measureContext.stroke();

    measureContext.fillStyle = 'blue';
    measureContext.font = '12px Arial';
    const midX = (p1Screen.x + p2Screen.x) / 2;
    const midY = (p1Screen.y + p2Screen.y) / 2 - 5;
    measureContext.fillText(text, midX, midY);
}

function updateMeasurementsList() {
    measurementsListEl.innerHTML = '';
    allMeasurements.forEach((m, index) => {
        const listItem = document.createElement('li');
        listItem.textContent = `Medición ${index + 1}: ${m.text}`;
        measurementsListEl.appendChild(listItem);
    });
}

measureDistanceBtn.addEventListener('click', function() {
    console.log('[BOTÓN MEDIR DISTANCIA] Al hacer clic, scaleFactor ES:', scaleFactor, "Unidad:", realWorldUnit, "isCalibrating:", isCalibrating);
    if (!pdfDoc) {
        alert("Carga un PDF primero.");
        return;
    }
    if (!scaleFactor && !isCalibrating) {
        alert("Por favor, calibra o aplica una escala primero si no vas a calibrar visualmente.");
        return;
    }

    isMeasuringDistance = !isMeasuringDistance;
    isCalibrating = false;
    calibrationStatusEl.textContent = 'Esperando inicio...';
    calibrationInputDiv.style.display = 'none';
    if (calibrationPoints.length > 0) {
        calibrationPoints = [];
        clearMeasureCanvas();
        redrawAllMeasurements();
    }

    if (isMeasuringDistance) {
        measureDistanceBtn.textContent = 'Cancelar Medición';
        measureDistanceBtn.style.backgroundColor = '#dc3545';
        measureStatusEl.textContent = 'Modo Medición: Haz clic en el PRIMER punto.';
        measureCanvas.style.pointerEvents = 'auto';
        measurementPoints = [];
        console.log("Modo Medición ACTIVADO. measureCanvas pointerEvents: auto");
    } else {
        measureDistanceBtn.textContent = 'Medir Distancia';
        measureDistanceBtn.style.backgroundColor = '#007bff';
        measureStatusEl.textContent = '';
        if (!isCalibrating) {
            measureCanvas.style.pointerEvents = 'none';
            console.log("Modo Medición DESACTIVADO. measureCanvas pointerEvents: none (si no se calibra)");
        }
        measurementPoints = [];
        clearMeasureCanvas();
        redrawAllMeasurements();
    }
});

clearMeasurementsBtn.addEventListener('click', function() {
    allMeasurements = [];
    clearMeasureCanvas();
    updateMeasurementsList();
});

// --- LÓGICA DE CALIBRACIÓN DE ESCALA ---
startCalibrateBtn.addEventListener('click', function() {
    console.log('[BOTÓN INICIAR CALIBRACIÓN VISUAL] Al hacer clic, scaleFactor ES:', scaleFactor, "Unidad:", realWorldUnit);
    if (!pdfDoc) {
        alert("Carga un PDF primero usando el selector de archivos.");
        return;
    }
    isMeasuringDistance = false;
    measureDistanceBtn.textContent = 'Medir Distancia';
    measureDistanceBtn.style.backgroundColor = '#007bff';
    measureStatusEl.textContent = '';

    isCalibrating = true;
    calibrationPoints = [];
    calibrationStatusEl.textContent = 'Haz clic en el PRIMER punto de una dimensión conocida en el PDF.';
    currentScaleInfoEl.textContent = "Calibrando visualmente...";
    clearMeasureCanvas();
    redrawAllMeasurements();
    measureCanvas.style.pointerEvents = 'auto';
    console.log("Modo Calibración Visual ACTIVADO. measureCanvas pointerEvents: auto");
});

setScaleBtn.addEventListener('click', function() { // Botón para calibración VISUAL
    if (calibrationPoints.length < 2) {
        alert("Por favor, selecciona dos puntos en el PDF para la calibración visual.");
        return;
    }
    const p1 = calibrationPoints[0];
    const p2 = calibrationPoints[1];
    const knownLength = parseFloat(knownLengthInput.value);
    const selectedUnit = knownUnitSelect.value;

    if (isNaN(knownLength) || knownLength <= 0) {
        alert('Ingresa una longitud real válida y positiva para la calibración visual.');
        currentScaleInfoEl.textContent = "Error en calibración visual.";
        calibrationInputDiv.style.display = 'block';
        calibrationStatusEl.textContent = 'Intenta calibrar de nuevo.';
        return;
    }

    const deltaX_pdf = p2[0] - p1[0];
    const deltaY_pdf = p2[1] - p1[1];
    const distanceInPdfUnits = Math.sqrt(deltaX_pdf * deltaX_pdf + deltaY_pdf * deltaY_pdf);

    if (distanceInPdfUnits === 0) {
        alert('Los puntos de calibración visual son idénticos. Intenta de nuevo.');
        isCalibrating = false;
        calibrationPoints = [];
        calibrationInputDiv.style.display = 'none';
        calibrationStatusEl.textContent = 'Esperando inicio...';
        currentScaleInfoEl.textContent = scaleFactor ? `1 unidad PDF = ${scaleFactor.toFixed(6)} ${realWorldUnit}` : "No calibrada";
        clearMeasureCanvas();
        redrawAllMeasurements();
        if (!isMeasuringDistance) measureCanvas.style.pointerEvents = 'none';
        return;
    }

    scaleFactor = knownLength / distanceInPdfUnits;
    realWorldUnit = selectedUnit;
    console.log('[CALIBRACIÓN VISUAL] scaleFactor FIJADO A:', scaleFactor, "Unidad:", realWorldUnit, "knownLength:", knownLength, "distanceInPdfUnits:", distanceInPdfUnits.toFixed(4));
    
    currentScaleInfoEl.textContent = `Escala Visual: 1 unidad PDF = ${scaleFactor.toFixed(6)} ${realWorldUnit}`;
    calibrationInputDiv.style.display = 'none';
    calibrationStatusEl.textContent = 'Escala visual fijada.';
    
    isCalibrating = false;
    calibrationPoints = [];
    clearMeasureCanvas();
    redrawAllMeasurements();
    if (!isMeasuringDistance) measureCanvas.style.pointerEvents = 'none';
    console.log("Escala Visual FIJADA. scaleFactor AHORA ES:", scaleFactor, "Unidad AHORA ES:", realWorldUnit);
});

applyPredefinedScaleBtn.addEventListener('click', function() {
    console.log('[BOTÓN APLICAR ESCALA PREDEFINIDA] Al hacer clic, scaleFactor ANTES ES:', scaleFactor, "Unidad ANTES:", realWorldUnit);
    if (!pdfDoc) {
        alert("Carga un PDF primero.");
        return;
    }
    const selectedScaleValue = predefinedScaleSelect.value;
    const selectedUnit = knownUnitSelect.value;

    if (!selectedScaleValue) {
        alert("Por favor, selecciona una escala predefinida de la lista.");
        return;
    }

    const scaleDenominator = parseFloat(selectedScaleValue);
    scaleFactor = scaleDenominator;
    realWorldUnit = selectedUnit;
    console.log('[ESCALA PREDEFINIDA] scaleFactor FIJADO A:', scaleFactor, "Unidad:", realWorldUnit);

    currentScaleInfoEl.textContent = `Escala Predefinida: 1:${scaleDenominator} (Unidad Real: ${realWorldUnit})`;
    calibrationStatusEl.textContent = 'Escala predefinida aplicada.';
    
    isCalibrating = false;
    calibrationPoints = [];
    calibrationInputDiv.style.display = 'none';
    isMeasuringDistance = false;
    measureDistanceBtn.textContent = 'Medir Distancia';
    measureDistanceBtn.style.backgroundColor = '#007bff';
    measureStatusEl.textContent = '';
    clearMeasureCanvas();
    redrawAllMeasurements();
    measureCanvas.style.pointerEvents = 'none';
    console.log(`Escala predefinida aplicada (Final). Factor=${scaleFactor}, Unidad=${realWorldUnit}`);
});


// --- MANEJADOR DE CLICS EN EL MEASURE CANVAS ---
measureCanvas.addEventListener('click', function(event) {
    alert('¡Clic en measureCanvas detectado!'); // Alerta simple para prueba
    console.log("CLIC EN MEASURECANVAS DETECTADO (prueba simple). Calibrando:", isCalibrating, "Midiendo:", isMeasuringDistance);

    if (!currentViewport || !pdfDoc) {
        console.log("Paso CLIC-WARN A: Viewport o PDF no disponible para el clic en measureCanvas.");
        return;
    }
    if (!isCalibrating && !isMeasuringDistance) {
        console.log("Paso CLIC-WARN C: Clic en measureCanvas pero ningún modo activo (calibrar/medir). Esto es inesperado si pointerEvents es 'none'.");
        return;
    }

    const rect = measureCanvas.getBoundingClientRect();
    const x_screen = event.clientX - rect.left;
    const y_screen = event.clientY - rect.top;
    const pdfPoint = currentViewport.convertToPdfPoint(x_screen, y_screen);

    screenCoordsEl.textContent = `X: ${x_screen.toFixed(2)}, Y: ${y_screen.toFixed(2)}`;
    pdfCoordsEl.textContent = `X: ${pdfPoint[0].toFixed(2)}, Y: ${pdfPoint[1].toFixed(2)}`;

    if (isCalibrating) {
        console.log("Paso CLIC-CALIBRATE A: Procesando clic para Calibración Visual. Puntos actuales:", calibrationPoints.length);
        if (calibrationPoints.length < 2) {
            calibrationPoints.push(pdfPoint);
            console.log("Paso CLIC-CALIBRATE B: Punto añadido para calibración:", pdfPoint);
            
            measureContext.fillStyle = 'rgba(255, 0, 0, 0.7)';
            measureContext.beginPath();
            const pointRadius = 5 / currentViewport.scale;
            measureContext.arc(x_screen, y_screen, pointRadius, 0, 2 * Math.PI);
            measureContext.fill();
            console.log("Paso CLIC-CALIBRATE C: Punto rojo de calibración dibujado en:", {x: x_screen, y: y_screen});

            if (calibrationPoints.length === 1) {
                calibrationStatusEl.textContent = 'PRIMER punto (calibración). Haz clic en el SEGUNDO.';
            } else if (calibrationPoints.length === 2) {
                calibrationStatusEl.textContent = 'SEGUNDO punto (calibración). Ingresa la longitud real.';
                calibrationInputDiv.style.display = 'block';
                knownLengthInput.value = '';
                knownLengthInput.focus();
            }
        }
    } else if (isMeasuringDistance) {
        console.log("Paso CLIC-MEASURE A: Procesando clic para Medición. Puntos actuales:", measurementPoints.length);
        measurementPoints.push({ pdf: pdfPoint, screen: { x: x_screen, y: y_screen } });
        clearMeasureCanvas();
        redrawAllMeasurements();

        measureContext.fillStyle = 'rgba(0, 0, 255, 0.7)';
        measurementPoints.forEach(p => {
            measureContext.beginPath();
            const pointRadius = 5 / currentViewport.scale;
            measureContext.arc(p.screen.x, p.screen.y, pointRadius, 0, 2 * Math.PI);
            measureContext.fill();
        });
        console.log("Paso CLIC-MEASURE B: Puntos de medición actuales dibujados.");

        if (measurementPoints.length === 1) {
            measureStatusEl.textContent = 'Modo Medición: PRIMER punto. Haz clic en el SEGUNDO.';
        } else if (measurementPoints.length === 2) {
            console.log("Paso CLIC-MEASURE C: Segundo punto de medición seleccionado. Calculando distancia...");
            const p1_pdf = measurementPoints[0].pdf;
            const p2_pdf = measurementPoints[1].pdf;

            const deltaX_pdf = p2_pdf[0] - p1_pdf[0];
            const deltaY_pdf = p2_pdf[1] - p1_pdf[1];
            const distanceInPdfUnits = Math.sqrt(deltaX_pdf * deltaX_pdf + deltaY_pdf * deltaY_pdf);
            
            console.log(`[MEDICIÓN] Calculando: distanceInPdfUnits=${distanceInPdfUnits.toFixed(4)}, scaleFactor=${scaleFactor}, realWorldUnit='${realWorldUnit}'`);
            
            // VERIFICAR scaleFactor y realWorldUnit aquí ANTES de usarlos
            if (scaleFactor === null || realWorldUnit === '') {
                console.error("Error Crítico: scaleFactor o realWorldUnit no están definidos al intentar medir.");
                alert("Error: La escala no está definida. Por favor, calibre o aplique una escala antes de medir.");
                // Resetear modo medición para evitar más errores
                isMeasuringDistance = false;
                measureDistanceBtn.textContent = 'Medir Distancia';
                measureDistanceBtn.style.backgroundColor = '#007bff';
                measureStatusEl.textContent = '';
                if (!isCalibrating) measureCanvas.style.pointerEvents = 'none';
                measurementPoints = [];
                clearMeasureCanvas();
                redrawAllMeasurements();
                return; // Salir para no calcular con valores nulos
            }

            const realDistance = distanceInPdfUnits * scaleFactor;
            const measurementText = `${realDistance.toFixed(2)} ${realWorldUnit}`;
            
            measureStatusEl.textContent = `Medición: ${measurementText}. Haz clic para nueva medición o cancela.`;
            
            const currentMeasurement = {
                p1Screen: measurementPoints[0].screen,
                p2Screen: measurementPoints[1].screen,
                text: measurementText
            };
            allMeasurements.push(currentMeasurement);
            drawLineOnMeasureCanvas(currentMeasurement.p1Screen, currentMeasurement.p2Screen, currentMeasurement.text);
            updateMeasurementsList();

            console.log("Paso CLIC-MEASURE D: Medición calculada y dibujada:", measurementText);
            measurementPoints = [];
        }
    } else {
        console.log("Paso CLIC-WARN B: Clic en measureCanvas pero ningún modo activo (calibrar/medir). Esto es inesperado.");
    }
});